import { ref as c, computed as d, watchEffect as b, onBeforeMount as k, onMounted as $, openBlock as f, createElementBlock as p, normalizeClass as l, normalizeStyle as u, renderSlot as C, normalizeProps as T, guardReactiveProps as M, unref as s, toDisplayString as O, createCommentVNode as P, withDirectives as A, createElementVNode as v, vShow as N } from "vue";
const y = {
  "fade-left": { transform: "translate(-100%, 0)" },
  "fade-right": { transform: "translate(100%, 0)" },
  "fade-up": { transform: "translate(0, -100%)" },
  "fade-down": { transform: "translate(0, 100%)" },
  default: { transform: "transform(-100%, 0)" }
}, V = {
  backgroundColor: {
    type: String,
    default: "#091a28"
  },
  color: {
    type: String,
    default: "#ffffff"
  },
  loadingSpeed: {
    type: Number,
    default: 15
  },
  overflowActive: {
    type: Boolean,
    default: !0
  },
  transitionSpeed: {
    type: Number,
    default: 1400
  },
  transitionType: {
    type: String,
    default: "fade-left"
  }
}, W = "_preloader_1auhy_3", z = "_percentBar_1auhy_29", E = "_loadingWrapper_1auhy_37", D = "_loadingBar_1auhy_47", I = {
  preloader: W,
  percentBar: z,
  loadingWrapper: E,
  loadingBar: D
}, H = (n, i) => {
  const t = n.__vccOpts || n;
  for (const [o, a] of i)
    t[o] = a;
  return t;
}, R = {
  __name: "VuePreloader",
  props: V,
  emits: ["loading-is-over", "transition-is-over"],
  setup(n, { emit: i }) {
    const t = i, o = n, a = c(null);
    var e = c(0);
    const m = d(() => ({ backgroundColor: o.backgroundColor })), g = d(() => ({ transition: `all ${o.transitionSpeed}ms ease-in-out` })), _ = d(() => {
      if (e.value >= 100)
        return y[o.transitionType] || y.default;
    });
    b(() => {
      e.value < 100 ? setTimeout(() => {
        e.value += 1, a.value && (a.value.style.width = `${e.value}%`);
      }, o.loadingSpeed) : (B(), h());
    }), k(() => {
      o.overflowActive && w();
    }), $(() => {
      e.value = e.value += 1;
    });
    function B() {
      t("loading-is-over");
    }
    function S() {
      document.body.style.overflow = "auto";
    }
    function w() {
      document.body.style.overflow = "hidden";
    }
    function h() {
      setTimeout(() => {
        t("transition-is-over"), o.overflowActive && S();
      }, o.transitionSpeed);
    }
    return (r, q) => (f(), p("div", {
      class: l(r.$style.preloader),
      style: u([
        m.value,
        g.value,
        _.value
      ])
    }, [
      C(r.$slots, "default", T(M({ color: r.color, percent: s(e) })), () => [
        s(e) < 100 ? (f(), p("div", {
          key: 0,
          class: l(r.$style.percentBar),
          style: u({ color: r.color })
        }, O(s(e)) + " % ", 7)) : P("", !0),
        A(v("div", {
          class: l(r.$style.loadingWrapper)
        }, [
          v("div", {
            ref_key: "loadingbar",
            ref: a,
            class: l(r.$style.loadingBar),
            style: u({ backgroundColor: r.color })
          }, null, 6)
        ], 2), [
          [N, s(e) < 100]
        ])
      ])
    ], 6));
  }
}, j = {
  $style: I
}, G = /* @__PURE__ */ H(R, [["__cssModules", j]]);
export {
  G as VuePreloader
};
